xlab="Sample mean length (nucleotides)",
ylab="Relative frequency",
font.main=3)
lines(x=rep(mean(
humanGeneLengths$geneLength),2),
y=c(0,par()$usr[4]),
lty="dotted",col="blue",
lwd=2)
legend(x="topright",
legend=c("true mean",
"mean from sampling distribution"),
lty=c(3,0),
pch=c(-1,17),pt.cex=1.5,
lwd=2,col="blue",bty="n")
points(mean(results100),
y=0.5*par()$usr[3],pch=17,
col="blue",cex=1.5)
results100<-vector()
for(i in 1:10000){
gene.lengths<-sample(
humanGeneLengths$geneLength,
size=100,replace=FALSE)
results100[i]<-mean(gene.lengths)
min.x<-min(1800,min(results100))
max.x<-max(4100,max(results100))
h<-hist(results100,breaks=seq(
min.x,max.x,
by=(max.x-min.x)/50),
right=FALSE,plot=FALSE)
h$counts<-h$counts/sum(h$counts)
if(i%%1==0){ ## change to i%%10 to sample every 10
dev.hold()
plot(h,col="lightgrey",las=1,
main=paste(
"Sampling distribution of the mean from",
i,"random samples"),
xlab="Sample mean length (nucleotides)",
ylab="Relative frequency")
lines(x=rep(mean(humanGeneLengths$geneLength),2),
y=c(0,par()$usr[4]),lty="dotted",col="blue",
lwd=2)
legend(x="topright",legend=c("true mean",
"mean from sampling distribution"),
lty=c(3,0),pch=c(-1,17),pt.cex=1.5,
lwd=2,col="blue",bty="n")
points(mean(results100),y=0.5*par()$usr[3],
pch=17,col="blue",cex=1.5)
dev.flush()
}
}
stand.dev <- function( x ) {
xbar <- mean(x)
n <- length(x)
s2 <- sum((x-xbar)^2)/(n-1)
s <- sqrt(s2)
return(s)
}
y <- c(1.2, 2.3, -4.5, 0.1)
sd(y)
stand.dev(y)
getwd()
setwd("../Desktop/myRfolder/")
list.files()
humanData<-read.csv(
file="HumanHemoGlobinElevation.csv")
head(humanData)
humanData<-read.csv(
file="HumanHemoGlobinElevation.csv",
stringsAsFactors = TRUE)
stand.dev(humanData$hemoglobin)
sd(humanData$hemoglobin)
levels(humanData$population)
popn<-levels(humanData$population)
N<-Mean<-SE<-SD<-vector()
popn
ii<-humanData$population=="Andes"
ii
humanData[ii,]
N[1]<-nrow(humanData[ii,])
Mean[1]<-mean(humanData[ii,]$hemoglobin)
N[1]<-nrow(humanData[ii,])
Mean[1]<-mean(humanData[ii,]$hemoglobin)
SD[1]<-stand.dev(humanData[ii,]$hemoglobin)
SE[1]<-SD[1]/sqrt(N[1])
ii<-humanData$population=="Ethiopia"
N[2]<-nrow(humanData[ii,])
Mean[2]<-mean(humanData[ii,]$hemoglobin)
SD[2]<-stand.dev(humanData[ii,]$hemoglobin)
SE[2]<-SD[2]/sqrt(N[2])
N
Mean
SD
SE
for(i 1:length(popn)){
ii<-humanData$population==popn[i]
N[i]<-nrow(humanData[ii,])
Mean[i]<-mean(humanData[ii,]$hemoglobin)
SD[i]<-stand.dev(humanData[ii,]$hemoglobin)
SE[i]<-SD[i]/sqrt(N[i])
}
for(i in 1:length(popn)){
ii<-humanData$population==popn[i]
N[i]<-nrow(humanData[ii,])
Mean[i]<-mean(humanData[ii,]$hemoglobin)
SD[i]<-stand.dev(humanData[ii,]$hemoglobin)
SE[i]<-SD[i]/sqrt(N[i])
}
N
Mean
SD
SE
data.frame(Population=popn,
Sample_size=N,
Mean=Mean,
SE=SE,
SD=SD)
stripchart(hemoglobin~population,data=humanData)
par(mfrow=c(2,2))
col <- rgb(1,0,0,alpha=0.25)
## panel a)
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(a) mean +/- 1 SE",
font.main=3)
points(hemoglobinTable$Mean ~
c(c(1,2,3,4)),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
hemoglobinTable$Mean -
hemoglobinTable$SE,
c(1,2,3,4),
hemoglobinTable$Mean +
hemoglobinTable$SE, col="blue")
## panel b)
CI<-data.frame(lower=rep(NA,4),
upper=rep(NA,4))
dimnames(CI)<-list(popn,
c("lower95","upper95"))
for(i in 1:nrow(CI)){
tmpHemoglobin<-
humanData$hemoglobin[humanData$population==
popn[i]]
CI[i,]<-c(t.test(
tmpHemoglobin)$conf.int[1],
t.test(tmpHemoglobin)$conf.int[2])
}
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(b) mean & 95% CI for the mean",
font.main=3)
points(hemoglobinTable$Mean ~
c(c(1,2,3,4)),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
CI[,1],
c(1,2,3,4),
CI[,2], col="blue")
## panel c)
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(c) mean +/- 1 SD",
font.main=3)
points(hemoglobinTable$Mean ~
c(1,2,3,4),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
hemoglobinTable$Mean -
hemoglobinTable$SD,
c(1,2,3,4),
hemoglobinTable$Mean +
hemoglobinTable$SD,
col="blue")
## panel d)
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(d) mean +/- 1.96 SD",
font.main=3)
points(hemoglobinTable$Mean ~
c(1,2,3,4),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
hemoglobinTable$Mean -
1.96*hemoglobinTable$SD,
c(1,2,3,4),
hemoglobinTable$Mean +
1.96*hemoglobinTable$SD,
col="blue")
hemoglobinTable<-data.frame(Population=popn,
Sample_size=N,
Mean=Mean,
SE=SE,
SD=SD)
par(mfrow=c(2,2))
col <- rgb(1,0,0,alpha=0.25)
## panel a)
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(a) mean +/- 1 SE",
font.main=3)
points(hemoglobinTable$Mean ~
c(c(1,2,3,4)),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
hemoglobinTable$Mean -
hemoglobinTable$SE,
c(1,2,3,4),
hemoglobinTable$Mean +
hemoglobinTable$SE, col="blue")
## panel b)
CI<-data.frame(lower=rep(NA,4),
upper=rep(NA,4))
dimnames(CI)<-list(popn,
c("lower95","upper95"))
for(i in 1:nrow(CI)){
tmpHemoglobin<-
humanData$hemoglobin[humanData$population==
popn[i]]
CI[i,]<-c(t.test(
tmpHemoglobin)$conf.int[1],
t.test(tmpHemoglobin)$conf.int[2])
}
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(b) mean & 95% CI for the mean",
font.main=3)
points(hemoglobinTable$Mean ~
c(c(1,2,3,4)),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
CI[,1],
c(1,2,3,4),
CI[,2], col="blue")
## panel c)
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(c) mean +/- 1 SD",
font.main=3)
points(hemoglobinTable$Mean ~
c(1,2,3,4),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
hemoglobinTable$Mean -
hemoglobinTable$SD,
c(1,2,3,4),
hemoglobinTable$Mean +
hemoglobinTable$SD,
col="blue")
## panel d)
stripchart(hemoglobin ~ population,
data = humanData,
cex=1.5,vertical = TRUE,
method = "jitter", jitter = 0.1,
pch = 19, col = col,
ylab = "Hemoglobin concentration (g/dL)",
main="(d) mean +/- 1.96 SD",
font.main=3)
points(hemoglobinTable$Mean ~
c(1,2,3,4),
pch = 16, cex=1.5,
col="blue")
segments(c(1,2,3,4),
hemoglobinTable$Mean -
1.96*hemoglobinTable$SD,
c(1,2,3,4),
hemoglobinTable$Mean +
1.96*hemoglobinTable$SD,
col="blue")
getwd()
setwd("../../Dropbox/CDC_COVID19_deaths/state-deaths/")
ls()
list.files()
source('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/state-deaths/state.deaths.R')
state.deaths()
state.deaths(plot="excess")
shiny::runApp()
rm(list=ls())
?sample
sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
toads<-list()
for(i in 1:1000){
toads[[i]]<-sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
}
toads[1:10]
i<-1
toads[[i]]=="right"
toads[[i]]
sum(toads[[i]]=="right")
for(i in 1:length(toads)){
n.right[i]<-sum(toads[[i]]=="right")
}
n.right<-vector()
for(i in 1:length(toads)){
n.right[i]<-sum(toads[[i]]=="right")
}
n.right
n.menor5<-sum(n.right<5)
n.mayor13<-sum(n.right>13)
n.menor5
n.mayor13
P<-(n.menor5+n.mayor13)/1000
P
hist(n.right)
hist(n.right)
for(i in 1:100000){
toads[[i]]<-sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
}
n.right<-vector()
for(i in 1:length(toads)){
n.right[i]<-sum(toads[[i]]=="right")
}
n.menor5<-sum(n.right<5)
n.mayor13<-sum(n.right>13)
P<-(n.menor5+n.mayor13)/1000
P
P<-(n.menor5+n.mayor13)/100000
P
n.menor5<-sum(n.right<5)
n.mayor13<-sum(n.right>13)
for(i in 1:100000){
toads[[i]]<-sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
}
n.right<-vector()
for(i in 1:length(toads)){
n.right[i]<-sum(toads[[i]]=="right")
}
n.menor5<-sum(n.right<5)
n.mayor13<-sum(n.right>13)
P<-(n.menor5+n.mayor13)/100000
P
for(i in 1:100000){
toads[[i]]<-sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
}
n.right<-vector()
for(i in 1:length(toads)){
n.right[i]<-sum(toads[[i]]=="right")
}
n.menor5<-sum(n.right<5)
n.mayor13<-sum(n.right>13)
P<-(n.menor5+n.mayor13)/100000
P
for(i in 1:100000){
toads[[i]]<-sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
}
n.right<-vector()
for(i in 1:length(toads)){
n.right[i]<-sum(toads[[i]]=="right")
}
n.menor5<-sum(n.right<5)
n.mayor13<-sum(n.right>13)
P<-(n.menor5+n.mayor13)/100000
P
for(i in 1:1000000){
toads[[i]]<-sample(c("left","right"),size=18,prob=c(0.5,0.5),
replace=TRUE)
}
n.right<-vector()
for(i in 1:length(toads)){
n.right[i]<-sum(toads[[i]]=="right")
}
n.menor5<-sum(n.right<5)
n.mayor13<-sum(n.right>13)
P<-(n.menor5+n.mayor13)/1000000
P
getwd()
source("state.deaths.R")
States<-state.deaths(plot="States")
States<-States[sort(rownames(States)),]
States<-States[-which(rownames(States)=="United States"),]
knitr::kable(round(States),
caption="**Table 1**: Estimated state population by year for 50 states, D.C., and Puerto Rico. New York is divided into two jurisdictions: New York City and New York, excluding NYC.",
align="r",format = "html", table.attr = "style='width:100%;'",
format.args=list(big.mark=","))
Deaths<-state.deaths(plot="Deaths")
Deaths<-cbind(Week=1:52,Deaths)
knitr::kable(Deaths,
caption="**Table 2**: Weekly death counts and provisional death counts in Massachusetts according to the NCHS from 2015 through 2020.",
align="r",format = "html", table.attr = "style='width:40%;'",
format.args=list(big.mark=","))
Data<-read.csv(file="https://data.cdc.gov/api/views/y5bj-9g5w/rows.csv?accessType=DOWNLOAD")
colnames(Data)
rm(list=ls())
States<-read.csv("https://liamrevell.github.io/data/nst-est2019-01.csv",row.names=1)
Counts<-read.csv("Weekly_counts_of_deaths_by_jurisdiction_and_age_group.csv")
getwd()
setwd("../age-deaths/")
Counts<-read.csv("Weekly_counts_of_deaths_by_jurisdiction_and_age_group.csv")
head(Counts)
state="Massachusetts"
plot=c("raw & excess","raw & percent above normal")
corrected=FALSE
plot<-plot[1]
ss<-state
States<-read.csv("https://liamrevell.github.io/data/nst-est2019-01.csv",row.names=1)
start.date<-as.Date("01/04/2020",format="%m/%d/%Y")
end.date<-as.Date("01/02/2021",format="%m/%d/%Y")
jj<-which(Counts$Year==2020)
start.day<-as.numeric(start.date-as.Date("01/01/2020",format="%m/%d/%Y"))
end.day<-as.numeric(end.date-as.Date("01/01/2020",format="%m/%d/%Y"))
US.popn<-setNames(c(colSums(States),331002651+States["Puerto Rico",5]),2015:2020)
States<-cbind(States,States[,5]/sum(States[,5])*US.popn[6])
colnames(States)<-2015:2020
nyc<-8336817
nyc<-nyc*States["New York",]/States["New York",5]
States["New York",]<-as.vector(States["New York",])-nyc
States<-rbind(States,nyc)
rownames(States)[nrow(States)]<-"New York City"
States<-rbind(States,colSums(States))
rownames(States)[nrow(States)]<-"United States"
States
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
?checkboxGroupInput
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
age.deaths(state="District of Columbia",age.group="Under 25 years")
traceback()
age.deaths(state="United States",age.group="Under 25 years")
source("age.deaths.R")
age.deaths(state="United States",age.group="Under 25 years")
age.deaths(state="District of Columbia",age.group="Under 25 years")
source("age.deaths.R")
age.deaths(state="District of Columbia",age.group="Under 25 years")
age.deaths(state="District of Columbia",age.group="Under 25 years")
age.deaths(state="District of Columbia",age.group="Under 25 years")
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
age.Counts<-read.csv("https://liamrevell.github.io/data/Weekly_counts_of_deaths_by_jurisdiction_and_age_group.csv")
object<-read.csv("https://liamrevell.github.io/data/Weekly_counts_of_deaths_by_jurisdiction_and_age_group.csv")
