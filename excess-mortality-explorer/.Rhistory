value=0.12,min=0.05,max=0.4,ticks=FALSE),
checkboxInput(inputId="smooth",
label="use smoothing for estimation",
value=TRUE),
checkboxInput(inputId="percent",
label="show as percent of total population",
value=FALSE),
checkboxInput(inputId="cumulative.cases",
label="show cumulative infections",
value=FALSE),
checkboxInput(inputId="show.points",label="show points (used in smoothing)",
value=FALSE),
actionButton("twitter_share",
label = "",
icon = icon("twitter"),
onclick = sprintf("window.open('%s')", tweet_url)),
actionButton("facebook_share",
label = "",
icon = icon("facebook"),
onclick = sprintf("window.open('%s')", facebook_url)),
downloadButton(outputId="down.cases",label="Save Plot"),
width=3
),
mainPanel(
plotOutput("plot.cases",width="auto",height="800px"),
width=9
)
),
sidebarPanel(
p(strong("Details:"),
"This platform was developed using the ",
a("shiny",href="https://shiny.rstudio.com/",target="_blank"),
"web application framework in ",
a("R",href="https://www.r-project.org/",target="_blank",.noWS="after"),
".",
"The data for these plots come from the U.S. CDC ",
a("COVID-19 Cases and Deaths by State over Time",
href="https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36",.noWS="outside"),
".",
em("Estimated"),"cases are based on moving average or LOESS smoothed CDC mortality data and an infection fatality ratio (IFR) specified by the user.",
em("Observed"),"cases are the sum of confirmed and presumed cases according to CDC data.",
"Number of cases in the last period of the data (during the lag-time to death) are based on observed cases and a fitted model for the relationship between observed and estimated cases through time.",
"Complete code and more details of methodology are available here:",
a("1",href="https://github.com/liamrevell/covid19.Explorer/",.noWS="after"),
", "
,a("2",href="http://covid19-explorer.org/methodology/",.noWS="after"),
".",
"Please",a("contact me",href="mailto:liamrevell@umb.edu")," with any questions."),
width=12)
)
),
tabPanel("Excess mortality by age", fluid = TRUE,
verticalLayout(
sidebarLayout(
sidebarPanel(
p(strong("Weekly excess mortality by age & jurisdiction."),br(),"See",
a("Methodology",href="https://covid19-explorer.org/methodology/",.noWS="after"),
" for more details.",style="text-align:center;"),
selectInput(inputId="state.age",label="State or jurisdiction",
choices=c("United States","Alabama","Alaska","Arizona",
"Arkansas","California","Colorado","Connecticut",
"Delaware","District of Columbia","Florida",
"Georgia","Hawaii","Idaho","Illinois",
"Indiana","Iowa","Kansas","Kentucky","Louisiana",
"Maine","Maryland","Massachusetts","Michigan","Minnesota",
"Mississippi","Missouri","Montana","Nebraska","Nevada",
"New Hampshire","New Jersey","New Mexico","New York (excluding NYC)",
"New York City","North Carolina","North Dakota",
"Ohio","Oklahoma","Oregon","Pennsylvania","Puerto Rico",
"Rhode Island","South Carolina","South Dakota","Tennessee",
"Texas","Utah","Vermont","Virginia",
"Washington","West Virginia","Wisconsin","Wyoming"),
selected="Massachusetts"),
checkboxGroupInput(inputId="age.group",label="Select age group(s):",
choices=c("Under 25 years","25-44 years","45-64 years",
"65-74 years","75-84 years","85 years and older"),
selected=c("Under 25 years","25-44 years","45-64 years",
"65-74 years","75-84 years","85 years and older")),
selectInput(inputId="plot.age",label="Show plot of:",
choices=c("raw & excess","raw & percent above normal")),
checkboxInput(inputId="corrected.age",
label="correct to 2020 population",
value=TRUE),
checkboxInput(inputId="cumulative",
label="show cumulative excess mortality",
value=TRUE),
dateRangeInput(inputId="start.end.age",label="Starting & ending dates:",
start=as.Date("01/01/2020",format="%m/%d/%Y"),
end=as.Date("12/31/2020",format="%m/%d/%Y"),
min=as.Date("01/01/2020",format="%m/%d/%Y"),
max=as.Date("12/31/2020",format="%m/%d/%Y"),startview="month"),
actionButton("twitter_share",
label = "",
icon = icon("twitter"),
onclick = sprintf("window.open('%s')", tweet_url)),
actionButton("facebook_share",
label = "",
icon = icon("facebook"),
onclick = sprintf("window.open('%s')", facebook_url)),
downloadButton(outputId="down.age",label="Save Plot"),
width=3
),
mainPanel(
plotOutput("plot.age",width="auto",height="800px"),
width=9
)
),
sidebarPanel(
p(strong("Details:"),
"This platform was developed using the ",
a("shiny",href="https://shiny.rstudio.com/",target="_blank"),
"web application framework in ",
a("R",href="https://www.r-project.org/",target="_blank",.noWS="after"),
".",
"The data for these plots come from the U.S. CDC provisional death counts.",
"Data for recent weeks are estimated based on reporting in past years.",
"Mortality data are from the ",a("CDC",href="https://data.cdc.gov/NCHS/Weekly-counts-of-deaths-by-jurisdiction-and-age-gr/y5bj-9g5w",
target="_blank",.noWS="outside"),
". Counts below 10 are not reported, so a Poisson model was used to estimate them.",
"Complete code and more details of methodology are available here:",
a("1",href="https://github.com/liamrevell/covid19.Explorer/",.noWS="after"),
", "
,a("2",href="http://covid19-explorer.org/methodology/",.noWS="after"),
".",
"Please",a("contact me",href="mailto:liamrevell@umb.edu")," with any questions."),
width=12)
)
),
tabPanel("By state", fluid = TRUE,
verticalLayout(
sidebarLayout(
sidebarPanel(
p(strong("Weekly excess mortality by U.S. state or jurisdiction."),br(),"See",
a("Methodology",href="https://covid19-explorer.org/methodology/",.noWS="after"),
" for more details.",style="text-align:center;"),
selectInput(inputId="state",label="State or jurisdiction",
choices=c("United States","Alabama","Alaska","Arizona",
"Arkansas","California","Colorado","Connecticut",
"Delaware","District of Columbia","Florida",
"Georgia","Hawaii","Idaho","Illinois",
"Indiana","Iowa","Kansas","Kentucky","Louisiana",
"Maine","Maryland","Massachusetts","Michigan","Minnesota",
"Mississippi","Missouri","Montana","Nebraska","Nevada",
"New Hampshire","New Jersey","New Mexico","New York (excluding NYC)",
"New York City","North Carolina","North Dakota",
"Ohio","Oklahoma","Oregon","Pennsylvania","Puerto Rico",
"Rhode Island","South Carolina","South Dakota","Tennessee",
"Texas","Utah","Vermont","Virginia",
"Washington","West Virginia","Wisconsin","Wyoming"),
selected="Massachusetts"),
selectInput(inputId="plot",label="Show plot of:",
choices=c("raw","per capita","excess",
"excess per capita","percent above normal")),
checkboxInput(inputId="corrected",
label="correct to 2020 population (per capita rates are automatically corrected)",
value=TRUE),
dateRangeInput(inputId="start.end",label="Starting & ending dates:",
start=as.Date("01/01/2020",format="%m/%d/%Y"),
end=as.Date("12/31/2020",format="%m/%d/%Y"),
min=as.Date("01/01/2020",format="%m/%d/%Y"),
max=as.Date("12/31/2020",format="%m/%d/%Y"),startview="month"),
selectInput(inputId="type",label="Line type",choices=c("smooth","step")),
actionButton("twitter_share",
label = "",
icon = icon("twitter"),
onclick = sprintf("window.open('%s')", tweet_url)),
actionButton("facebook_share",
label = "",
icon = icon("facebook"),
onclick = sprintf("window.open('%s')", facebook_url)),
downloadButton(outputId="down.state",label="Save Plot"),
width=3
),
mainPanel(
plotOutput("plot.state",width="auto",height="800px"),
width=9
)
),
sidebarPanel(
p(strong("Details:"),
"This platform was developed using the ",
a("shiny",href="https://shiny.rstudio.com/",target="_blank"),
"web application framework in ",
a("R",href="https://www.r-project.org/",target="_blank",.noWS="after"),
".",
"The data for these plots come from the U.S. CDC provisional death counts.",
"Data for recent weeks are incomplete. For more information please refer to the",
a("CDC technical notes",href="https://www.cdc.gov/nchs/nvss/vsrr/covid19/tech_notes.htm",target="_blank",.noWS="after"),".",
"Mortality data are from the CDC (",a("1",href="https://data.cdc.gov/NCHS/Weekly-Counts-of-Deaths-by-State-and-Select-Causes/3yf8-kanr",
target="_blank",.noWS="outside"),", ",a("2",
href="https://data.cdc.gov/NCHS/Weekly-Counts-of-Deaths-by-State-and-Select-Causes/muzy-jte6",
target="_blank",.noWS="outside"),"). State population size data are from the",a("U.S. census bureau",
href="https://www.census.gov/data/datasets/time-series/demo/popest/2010s-state-total.html",target="_blank",.noWS="after"),
". Complete code and more details of methodology are available here:",
a("1",href="https://github.com/liamrevell/covid19.Explorer/",.noWS="after"),
", "
,a("2",href="http://covid19-explorer.org/methodology/",.noWS="after"),
".",
"Please",a("contact me",href="mailto:liamrevell@umb.edu")," with any questions."),
width=12)
)
)
),
)
server <- function(input, output, data=Data, session) {
makeIFR<-function(ifr,smooth=TRUE){
ifr<-c(ifr[1],ifr,ifr[length(ifr)])
tt<-c(1,32,32+91,32+91+92,32+91+92+91,366+32,366+32+28+31+30)
tmp<-vector()
for(i in 1:(length(ifr)-1)){
tmp<-c(tmp,seq(ifr[i],ifr[i+1],length.out=tt[i+1]-tt[i]))
}
if(smooth){
tt<-1:(max(tt)-min(tt))
tmp<-predict(loess(tmp~tt,span=0.3))
}
tmp
}
output$plot.state<-renderPlot({
options(scipen=10)
par(lend=1)
state.deaths(state=input$state,plot=input$plot,
las=1,cex.axis=0.8,cex.lab=0.9,
type=if(input$type=="step") "s" else "l",
data=data,corrected=input$corrected,
date.range=list(start.date=input$start.end[1],
end.date=input$start.end[2]))
})
output$down.state<-downloadHandler(
filename =  function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=10,units="in",res=800) # open the png device
par(lend=1)
state.deaths(state=input$state,plot=input$plot,
las=1,cex.axis=0.8,cex.lab=0.9,
type=if(input$type=="step") "s" else "l",
data=data,corrected=input$corrected,
date.range=list(start.date=input$start.end[1],
end.date=input$start.end[2]),
bg="white")
dev.off()
}
)
output$plot.age<-renderPlot({
options(scipen=10)
par(lend=1)
age.deaths(state=input$state.age,
plot=input$plot.age,
las=1,cex.axis=0.8,cex.lab=0.9,
age.group=input$age.group,
data=data,
corrected=input$corrected.age,
cumulative=input$cumulative,
date.range=list(
start.date=input$start.end.age[1],
end.date=input$start.end.age[2]))
})
output$down.age<-downloadHandler(
filename =  function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=10,units="in",res=800) # open the png device
par(lend=1)
age.deaths(state=input$state.age,
plot=input$plot.age,
las=1,cex.axis=0.8,cex.lab=0.9,
age.group=input$age.group,
data=data,
corrected=input$corrected.age,
cumulative=input$cumulative,
date.range=list(
start.date=input$start.end.age[1],
end.date=input$start.end.age[2]),
bg="white")
dev.off()
}
)
output$plot.iceberg<-renderPlot({
options(scipen=10)
par(lend=1)
iceberg.plot(state=input$state.ib,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
ifr=makeIFR(c(input$ifr1.ib,input$ifr2.ib,input$ifr3.ib,input$ifr4.ib,input$ifr5.ib)/100,
smooth=TRUE),
delay=input$delay.ib,window=1,
span=input$span.ib)
})
output$down.iceberg<-downloadHandler(
filename = function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=10,units="in",res=800) # open the png device
options(scipen=10)
par(lend=1)
iceberg.plot(state=input$state.ib,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
ifr=makeIFR(c(input$ifr1.ib,input$ifr2.ib,input$ifr3.ib,input$ifr4.ib,input$ifr5.ib)/100,
smooth=TRUE),
delay=input$delay.ib,window=1,
span=input$span.ib,
bg="white")
dev.off()
}
)
output$plot.cases<-renderPlot({
options(scipen=10)
par(lend=1)
infection.estimator(state=input$state.cases,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
cumulative=input$cumulative.cases,
ifr=makeIFR(c(input$ifr1,input$ifr2,input$ifr3,input$ifr4,input$ifr5)/100,
smooth=input$smooth),
delay=input$delay,window=input$window,
smooth=input$smooth,
percent=input$percent,
show.points=input$show.points,
span=input$span)
})
output$down.cases<-downloadHandler(
filename =  function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=10,units="in",res=800) # open the png device
par(lend=1)
infection.estimator(state=input$state.cases,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
cumulative=input$cumulative.cases,
ifr=makeIFR(c(input$ifr1,input$ifr2,input$ifr3,input$ifr4,input$ifr5)/100,
smooth=input$smooth),
delay=input$delay,window=input$window,
smooth=input$smooth,
percent=input$percent,
show.points=input$show.points,
span=input$span,
bg="white")
dev.off()
}
)
output$plot.allstates<-renderPlot({
options(scipen=10)
par(lend=1)
infections.by.state(las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
ifr=makeIFR(c(input$ifr1.bs,input$ifr2.bs,input$ifr3.bs,input$ifr4.bs,input$ifr5.bs)/100,
smooth=TRUE),
delay=input$delay.bs,window=1,
smooth=TRUE,show.ifr=input$show.ifr,
cumulative=input$cumulative.bs,show.as.percent=input$show.as.percent,
span=input$span.bs)
})
output$down.allstates<-downloadHandler(
filename =  function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=8,units="in",res=800) # open the png device
par(lend=1)
infections.by.state(las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
ifr=makeIFR(c(input$ifr1.bs,input$ifr2.bs,input$ifr3.bs,input$ifr4.bs,input$ifr5.bs)/100,
smooth=TRUE),
delay=input$delay.bs,window=1,
smooth=TRUE,show.ifr=input$show.ifr,
cumulative=input$cumulative.bs,show.as.percent=input$show.as.percent,
span=input$span.bs,
bg="white")
dev.off()
}
)
output$plot.range<-renderPlot({
options(scipen=10)
par(lend=1)
infection.range.estimator(state=input$state.range,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
ifr.low=makeIFR(c(input$ifr1.range[1],input$ifr2.range[1],input$ifr3.range[1],
input$ifr4.range[1],input$ifr5.range[1])/100,smooth=TRUE),
ifr.high=makeIFR(c(input$ifr1.range[2],input$ifr2.range[2],input$ifr3.range[2],
input$ifr4.range[2],input$ifr5.range[2])/100,smooth=TRUE),
delay=input$delay.range,window=1,
cumulative=input$cumulative.range,percent=input$percent.range,
span=input$span.range)
})
output$down.range<-downloadHandler(
filename =  function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=10,units="in",res=800) # open the png device
par(lend=1)
infection.range.estimator(state=input$state.range,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
ifr.low=makeIFR(c(input$ifr1.range[1],input$ifr2.range[1],input$ifr3.range[1],
input$ifr4.range[1],input$ifr5.range[1])/100,smooth=TRUE),
ifr.high=makeIFR(c(input$ifr1.range[2],input$ifr2.range[2],input$ifr3.range[2],
input$ifr4.range[2],input$ifr5.range[2])/100,smooth=TRUE),
delay=input$delay.range,window=1,
cumulative=input$cumulative.range,percent=input$percent.range,
span=input$span.range,
bg="white")
dev.off()
}
)
output$plot.comparison<-renderPlot({
options(scipen=10)
par(lend=1,lwd=2)
compare.infections(state=input$states,las=1,cex.axis=0.8,cex.lab=0.9,
data=data,ifr=makeIFR(c(input$ifr1.c,input$ifr2.c,input$ifr3.c,
input$ifr4.c,input$ifr5.c)/100,smooth=TRUE),
delay=input$delay.c,window=1,
cumulative=input$cumulative.c,
per.capita=input$per.capita,
span=input$span.c)
})
output$down.comparison<-downloadHandler(
filename =  function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=10,units="in",res=800) # open the png device
par(lend=1,lwd=2)
compare.infections(state=input$states,las=1,cex.axis=0.8,cex.lab=0.9,
data=data,ifr=makeIFR(c(input$ifr1.c,input$ifr2.c,input$ifr3.c,
input$ifr4.c,input$ifr5.c)/100,smooth=TRUE),
delay=input$delay.c,window=1,
cumulative=input$cumulative.c,
per.capita=input$per.capita,
span=input$span.c,
bg="white")
dev.off()
}
)
observe({
x<-input$split.cd
y<-input$show.cd
if(x&&y%in%c("deaths / 1M population","as % of total"))
updateSelectInput(session, "plot.cd",
label="Plotting options:",
choices=c("smoothed"),
selected="smoothed")
})
observe({
x<-input$split.cd
if(x==FALSE)
updateSelectInput(session, "plot.cd",
label="Plotting options:",
choices=c("bar plot","polygons","smoothed"),
selected=input$plot.cd)
})
observe({
x<-input$show.cd
if(x=="raw deaths")
updateSelectInput(session, "plot.cd",
label="Plotting options:",
choices=c("bar plot","polygons","smoothed"),
selected=input$plot.cd)
})
output$plot.cd<-renderPlot({
options(scipen=10)
show<-if(input$show.cd=="raw deaths") "raw" else
if(input$show.cd=="deaths / 1M population") "per.capita" else
if(input$show.cd=="as % of total") "percent" else
if(input$show.cd=="as % of COVID-19 deaths") "percent.of.covid.deaths"
plot<-if(input$plot.cd=="bar plot") "bar" else
if(input$plot.cd=="polygons") "standard" else
if(input$plot.cd=="smoothed") "smooth"
covid.deaths(age.group=input$ages,
sex=input$sex,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
cumulative=input$cumulative.cd,
show=show,plot=plot,
split.groups=input$split.cd)
})
output$down.cd<-downloadHandler(
filename =  function() {
paste("covid19.Explorer.plot-", Sys.Date(), ".png", sep="")
},
content = function(file) {
png(file,width=12,height=10,units="in",res=800) # open the png device
par(lend=1)
show<-if(input$show.cd=="raw deaths") "raw" else
if(input$show.cd=="deaths / 1M population") "per.capita" else
if(input$show.cd=="as % of total") "percent" else
if(input$show.cd=="as % of COVID-19 deaths") "percent.of.covid.deaths"
plot<-if(input$plot.cd=="bar plot") "bar" else
if(input$plot.cd=="polygons") "standard" else
if(input$plot.cd=="smoothed") "smooth"
covid.deaths(age.group=input$ages,
sex=input$sex,
las=1,cex.axis=0.8,cex.lab=0.9,
data=data,
cumulative=input$cumulative.cd,
show=show,plot=plot,
split.groups=input$split.cd,
bg="white")
dev.off()
}
)
}
shinyApp(ui = ui, server = server)
Data<-updateData(Data,what=c("Cases","CovidDeaths"))
