2 + 2
2 + 2
2+2
2+2
2+3
2 * 3
2 ^ 3
2 / 3
2^(4+1)
(2^4) + 1
for(i in 1:100L) {}
for(i in 1:100L) {
2+2
2+3
2 * 3
2 ^ 3
2 / 3
2^(4+1)
(2^4) + 1
That's all there is to it.
## This is an example R markdown file.
If you are reading this in HTML format, click [here](example-markdown.Rmd) to see the original R markdown version, or to download it & view in a text editor.
Converting a R markdown file to HTML (or a different format, such as PDF) is called *knitting*. If we intend to knit this file to html (hypertext markdown to read in a web browser), we can use any applicable html tag, or their [markdown equivalents](https://es.wikipedia.org/wiki/Markdown).
However, we can also write in plain text sentences and paragraphs.
Whenever we want to show code, we can use the following markdown style:
```
This is a code chunk
```
However when we knit this markdown file, this will not be executed in R.
To write a code chunk that will be executed, we can use the following style:
```{r}
x<-5
5
```
Any function (other than interacting with plots, etc.) that we can realize in R, we can put in our markdown file & knit. For instance:
```{r, dpi=100}
x<-rnorm(n=100)
hist(x,breaks=20,col="lightgrey",xlab="value of x",ylab="Frequency",
main="Example plot")
```
This includes reading and writing to file, although we must be sure that we are currently in the same directory as the file, or that we specify the full path to the file. For example:
```{r, dpi=100}
guppyData<-read.csv("GuppyFatherSonAttractiveness.csv")
guppyData
plot(sonAttractiveness~fatherOrnamentation,data=guppyData,cex=2,
pch=21,bg="grey",xlab="Degree of paternal ornamentation",
ylab="Attractiveness of son")
```
Code chunks that we do not want to evaluate we can write as follows:
```{r, eval=FALSE}
head(guppyData)
```
To knit our file into .html we need to have the package [knitr](https://cran.r-project.org/web/packages/knitr/index.html) installed. Then we simply run:
```{r, eval=FALSE}
library(knitr)
knit2html("example-markdown.Rmd","example-markdown.html")
```
substituting our own input & desired output filenames.
That's all there is to it.
library(knitr)
x<-5
5
x<-rnorm(n=100)
hist(x,breaks=20,col="lightgrey",xlab="value of x",ylab="Frequency",
main="Example plot")
guppyData<-read.csv("GuppyFatherSonAttractiveness.csv")
my_funcion <- function( y ){
suma_de_y <- sum( y )
n_de_y <- length( y )
la_media <- suma_de_y / n_de_y
return( la_media )
}
ls()
x <- c(-1.1, 2.7, 0.4, 1.2, -0.3)
x
my_funcion(x)
mean(x)
rm(list=ls())
## la estructura general de una funcion en R
my_funcion <- function( y ){
suma_de_y <- sum( y )
n_de_y <- length( y )
la_media <- suma_de_y / n_de_y
return( la_media )
}
x <- c(-1.1, 2.7, 0.4, 1.2, -0.3)
getwd()
hemoglobinData <- read.csv("HumanHemoglobinElevation.csv")
head(hemoglobinData)
stripchart(hemoglobin~population, data=hemoglobinData)
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = FALSE)
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE)
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
par()$mar
par(mar=c(5.1,4.1,1.1,2.1))
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
histogram(hemoglobinData$hemoglobin)
hist(hemoglobinData$hemoglobin)
par(mar=c(1.1,4.1,1.1,2.1))
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
hist(hemoglobinData$hemoglobin)
par(mar=c(1.1,4.1,1.1,2.1))
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
hist(hemoglobinData$hemoglobin)
par(mar=c(5.1,4.1,4.1,2.1))
hist(hemoglobinData$hemoglobin)
par(mar=c(1.1,4.1,1.1,2.1))
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
hist(hemoglobinData$hemoglobin)
par(mfrow=c(1,2))
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
par(mfrow=c(2,1))
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1))
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", bty="n")
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter")
?points
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16)
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col="blue")
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1))
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1,alpha=0.5))
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1,alpha=0.1))
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1,alpha=0.2))
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1,alpha=0.2))
hist(hemoglobinData$hemoglobin,main="")
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1,alpha=0.2))
hist(hemoglobinData$hemoglobin)
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1,alpha=0.2))
hist(hemoglobinData$hemoglobin,main="Mi titulo costumbre")
par(mfrow=c(2,1),mar=c(5.1,4.1,1.1,1.1), bty="n")
stripchart(hemoglobin~population, data=hemoglobinData,
vertical = TRUE, method = "jitter", pch=16,
col=rgb(0,0,1,alpha=0.2))
hist(hemoglobinData$hemoglobin,main="")
plot(rnorm(n=10),rnorm(n=10))
humanGeneLengths<-read.csv(
file="HumanGeneLengths.csv")
results100<-vector()
for(i in 1:10000){
gene.lengths<-sample(
humanGeneLengths$geneLength,
size=100,replace=FALSE)
results100[i]<-mean(gene.lengths)
}
h<-hist(results100,
breaks=50,
right=FALSE,
plot=FALSE)
h$counts<-h$counts/
sum(h$counts)
plot(h,col="lightgrey",las=1,
main=paste(
"Sampling distribution of the mean from",
i,"random samples"),
xlab="Sample mean length (nucleotides)",
ylab="Relative frequency",
font.main=3)
lines(x=rep(mean(
humanGeneLengths$geneLength),2),
y=c(0,par()$usr[4]),
lty="dotted",col="blue",
lwd=2)
legend(x="topright",
legend=c("true mean",
"mean from sampling distribution"),
lty=c(3,0),
pch=c(-1,17),pt.cex=1.5,
lwd=2,col="blue",bty="n")
points(mean(results100),
y=0.5*par()$usr[3],pch=17,
col="blue",cex=1.5)
results100<-vector()
for(i in 1:10000){
gene.lengths<-sample(
humanGeneLengths$geneLength,
size=100,replace=FALSE)
results100[i]<-mean(gene.lengths)
min.x<-min(1800,min(results100))
max.x<-max(4100,max(results100))
h<-hist(results100,breaks=seq(
min.x,max.x,
by=(max.x-min.x)/50),
right=FALSE,plot=FALSE)
h$counts<-h$counts/sum(h$counts)
if(i%%1==0){ ## change to i%%10 to sample every 10
dev.hold()
plot(h,col="lightgrey",las=1,
main=paste(
"Sampling distribution of the mean from",
i,"random samples"),
xlab="Sample mean length (nucleotides)",
ylab="Relative frequency")
lines(x=rep(mean(humanGeneLengths$geneLength),2),
y=c(0,par()$usr[4]),lty="dotted",col="blue",
lwd=2)
legend(x="topright",legend=c("true mean",
"mean from sampling distribution"),
lty=c(3,0),pch=c(-1,17),pt.cex=1.5,
lwd=2,col="blue",bty="n")
points(mean(results100),y=0.5*par()$usr[3],
pch=17,col="blue",cex=1.5)
dev.flush()
}
}
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
case.estimator()
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
Centers<-read.csv("https://liamrevell.github.io/data/Centers.csv")
Cases<-read.csv("https://liamrevell.github.io/data/United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv")
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
Centers<-read.csv("https://liamrevell.github.io/data/Centers.csv")
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
cases.by.state
cases.by.state()
list.files()
Centers<-read.csv("https://liamrevell.github.io/data/Centers.csv")
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
View(moving.average)
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
shiny::runApp('C:/Users/liamj/Dropbox/CDC_COVID19_deaths/excess-mortality-explorer')
setwd("../Dropbox/CDC_COVID19_deaths/excess-mortality-explorer/")
shiny::runApp()
runApp()
runApp()
runApp()
